Same as previous examples, we have a buffer of size 0x40, but this time user doesn't give the input as an argument or by the keyboard. This time the binary calles the function "getenv" with a string argument "GREENIE", if we type:
    # man getenv
We get information about the function, and we see that it returns the pointer to the value of the variable with same name as the one given as parameter. Then if we check in radare:
    # r2 ./stack2
    > aaa
    > afl # check functions
    > s main
    > pdf

In the code we can see that it takes the pointer to environment variable value, and makes a strcpy to buffer previously commented, with a size of 0x40. Then it checks, if a int32_t variable (that I called "modified"), is equals to the value 0x0d0a0d0a, that corresponds to the values \r\n\r\n. We have to set a variable called GREENIE with 0x40 bytes of trash and finally call the binary stack2:

    # GREENIE=`python -c "print 'A'*0x40 + '\x0a\x0d\x0a\x0d'"` && ./stack2

Remember that dword values in little endian are given in reverse.
